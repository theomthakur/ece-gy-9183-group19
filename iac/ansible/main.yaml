apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: build-container-image
spec:
  entrypoint: kaniko-build-flow
  arguments:
    parameters:
    - name: model-version

  volumeClaimTemplates:
  - metadata:
      name: workdir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 2Gi

  templates:
  - name: kaniko-build-flow
    steps:
      - - name: clone-repo
          template: git-clone
      - - name: fetch-model
          template: download-model
          arguments:
            parameters:
            - name: model-version
              value: "{{workflow.parameters.model-version}}"
      - - name: kaniko-build
          template: kaniko
          arguments:
            parameters:
            - name: model-version
              value: "{{workflow.parameters.model-version}}"
      - - name: tag-model-staging
          template: set-mlflow-alias
          arguments:
            parameters:
            - name: model-version
              value: "{{workflow.parameters.model-version}}"
      - - name: deploy-to-staging
          template: trigger-deploy
          arguments:
            parameters:
            - name: model-version
              value: "{{workflow.parameters.model-version}}"
            - name: environment
              value: "staging"

  - name: git-clone
    container:
      image: alpine/git
      command: [sh, -c]
      args:
        - |
          git clone --branch workflow https://github.com/teaching-on-testbeds/gourmetgram.git /mnt/workspace
      volumeMounts:
      - name: workdir
        mountPath: /mnt/workspace

  - name: download-model
    inputs:
      parameters:
      - name: model-version
    container:
      image: python:3.11-slim
      command: [sh, -c]
      args:
        - |
          pip install mlflow-skinny
          export MLFLOW_TRACKING_URI=http://mlflow.gourmetgram-platform.svc.cluster.local:8000
          mkdir -p /tmp/mlflow_model

          echo "Downloading MLflow model artifacts..."
          mlflow artifacts download \
            --artifact-uri models:/GourmetGramFood11Model/{{inputs.parameters.model-version}} \
            -d /tmp/mlflow_model || { echo "MLflow download failed"; exit 1; }

          echo "Searching for model.pth..."
          FOUND=$(find /tmp/mlflow_model/data -name model.pth | head -n 1)
          if [ -z "$FOUND" ]; then
            echo "ERROR: model.pth not found in MLflow artifacts"; exit 1
          fi

          echo "Copying model.pth to app/ as food11.pth..."
          cp "$FOUND" /mnt/workspace/food11.pth
          echo "1.0.{{inputs.parameters.model-version}}" > /mnt/workspace/versions.txt
      volumeMounts:
      - name: workdir
        mountPath: /mnt/workspace

  - name: kaniko
    inputs:
      parameters:
      - name: model-version
    container:
      image: gcr.io/kaniko-project/executor:latest
      args:
        - --dockerfile=/mnt/workspace/Dockerfile
        - --context=/mnt/workspace
        - --destination=registry.kube-system.svc.cluster.local:5000/gourmetgram-app:staging-1.0.{{inputs.parameters.model-version}}
        - --insecure
      volumeMounts:
      - name: workdir
        mountPath: /mnt/workspace

  - name: set-mlflow-alias
    inputs:
      parameters:
      - name: model-version
    script:
      image: python:3.11-slim
      command: [sh, -c]
      source: |
        pip install mlflow-skinny > /dev/null
        export MLFLOW_TRACKING_URI=http://mlflow.gourmetgram-platform.svc.cluster.local:8000
        python -c "import mlflow; client = mlflow.tracking.MlflowClient(); client.set_registered_model_alias(name='GourmetGramFood11Model', alias='staging', version='{{inputs.parameters.model-version}}')"
  
  - name: trigger-deploy
    inputs:
      parameters:
      - name: model-version
      - name: environment
    resource:
      action: create
      manifest: |
        apiVersion: argoproj.io/v1alpha1
        kind: Workflow
        metadata:
          generateName: deploy-container-image-
        spec:
          workflowTemplateRef:
            name: deploy-container-image
          arguments:
            parameters:
            - name: environment
              value: "{{inputs.parameters.environment}}"
            - name: model-version
              value: "{{inputs.parameters.model-version}}"

apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: kaniko-pvc-build-
spec:
  entrypoint: kaniko-build-flow
  volumeClaimTemplates:
  - metadata:
      name: workdir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi

  templates:
  - name: kaniko-build-flow
    steps:
      - - name: clone-repo
          template: git-clone
      - - name: kaniko-build
          template: kaniko

  - name: git-clone
    container:
      image: alpine/git
      command: [sh, -c]
      args:
        - |
          git clone --branch master https://github.com/teaching-on-testbeds/gourmetgram.git /mnt/workspace
      volumeMounts:
      - name: workdir
        mountPath: /mnt/workspace

  - name: kaniko
    container:
      image: gcr.io/kaniko-project/executor:latest
      args:
        - --dockerfile=/mnt/workspace/Dockerfile
        - --context=/mnt/workspace
        - --destination=registry.kube-system.svc.cluster.local:5000/gourmetgram-app:staging-1.0.0
        - --destination=registry.kube-system.svc.cluster.local:5000/gourmetgram-app:canary-1.0.0
        - --destination=registry.kube-system.svc.cluster.local:5000/gourmetgram-app:production-1.0.0
        - --insecure
      volumeMounts:
      - name: workdir
        mountPath: /mnt/workspace

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: train-model
spec:
  entrypoint: training-and-build
  arguments:
    parameters:
    - name: endpoint-ip

  templates:
  - name: training-and-build
    steps:
      - - name: trigger-training-endpoint
          template: call-endpoint
          arguments:
            parameters:
            - name: endpoint-ip
              value: "{{workflow.parameters.endpoint-ip}}"
      - - name: build-container
          template: trigger-build
          arguments:
            parameters:
            - name: model-version
              value: "{{steps.trigger-training-endpoint.outputs.result}}"
          when: "{{steps.trigger-training-endpoint.outputs.result}} != ''"

  - name: call-endpoint
    inputs:
      parameters:
      - name: endpoint-ip
    script:
      image: alpine:3.18
      command: [sh]
      source: |
        apk add --no-cache curl jq > /dev/null
        RESPONSE=$(curl -s -X POST http://{{inputs.parameters.endpoint-ip}}:9090/trigger-training)
        VERSION=$(echo $RESPONSE | jq -r '.new_model_version // empty')
        echo -n $VERSION

  - name: trigger-build
    inputs:
      parameters:
      - name: model-version
    resource:
      action: create
      manifest: |
        apiVersion: argoproj.io/v1alpha1
        kind: Workflow
        metadata:
          generateName: build-container-image-
        spec:
          workflowTemplateRef:
            name: build-container-image
          arguments:
            parameters:
            - name: model-version
              value: "{{inputs.parameters.model-version}}"
