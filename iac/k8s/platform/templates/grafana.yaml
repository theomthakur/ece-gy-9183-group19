---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: grafana-data-pv
  namespace: gourmetgram-platform
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: grafana-block-storage
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - node1
  local:
    path: /mnt/mydata/grafana
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: grafana-block-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-data-pvc
  namespace: gourmetgram-platform
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: grafana-block-storage
  resources:
    requests:
      storage: 10Gi
---
apiVersion: batch/v1
kind: Job
metadata:
  name: grafana-permissions-setup
  namespace: gourmetgram-platform
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      restartPolicy: OnFailure
      nodeSelector:
        kubernetes.io/hostname: node1
      containers:
      - name: permissions-setup
        image: busybox
        securityContext:
          runAsUser: 0
          privileged: true
        command: ["/bin/sh", "-c"]
        args:
        - |
          mkdir -p /mnt/mydata/grafana
          chown -R 472:472 /mnt/mydata/grafana
          chmod -R 777 /mnt/mydata/grafana
        volumeMounts:
        - name: grafana-storage
          mountPath: /mnt/mydata/grafana
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: gourmetgram-platform
  labels:
    app: grafana
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
  externalIPs:
  - {{ .Values.grafana.externalIP }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: gourmetgram-platform
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      nodeSelector:
        kubernetes.io/hostname: node1
      securityContext:
        fsGroup: 472
        runAsUser: 472
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - node1
      tolerations:
      - key: "node-role.kubernetes.io/control-plane"
        operator: "Exists"
        effect: "NoSchedule"
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: admin
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: admin
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
      volumes:
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-data-pvc
